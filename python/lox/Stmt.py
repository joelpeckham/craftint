# Stmt.py
# This file was generated by tool/generateAST.py.
# Generated by: Joel Peckham.
# Last Modified: 2022-03-17.

from abc import ABC, abstractmethod

class Stmt(ABC):
	@abstractmethod
	def accept(self, visitor):
		pass

class Block(Stmt):
	def __init__(self, statements):
		"""Block          : List<Stmt> statements"""
		self.statements = statements
	def accept(self, visitor):
		return visitor.visitBlockStmt(self)

class Class(Stmt):
	def __init__(self, name, superclass, methods):
		"""Class          : Token name, Expr.Variable superclass, List<Stmt.Function> methods"""
		self.name = name
		self.superclass = superclass
		self.methods = methods
	def accept(self, visitor):
		return visitor.visitClassStmt(self)

class Expression(Stmt):
	def __init__(self, expression):
		"""Expression     : Expr expression"""
		self.expression = expression
	def accept(self, visitor):
		return visitor.visitExpressionStmt(self)

class Function(Stmt):
	def __init__(self, name, params, body):
		"""Function       : Token name, List<Token> params, List<Stmt> body"""
		self.name = name
		self.params = params
		self.body = body
	def accept(self, visitor):
		return visitor.visitFunctionStmt(self)

class If(Stmt):
	def __init__(self, condition, thenBranch, elseBranch):
		"""If             : Expr condition, Stmt thenBranch, Stmt elseBranch"""
		self.condition = condition
		self.thenBranch = thenBranch
		self.elseBranch = elseBranch
	def accept(self, visitor):
		return visitor.visitIfStmt(self)

class Print(Stmt):
	def __init__(self, expression):
		"""Print          : Expr expression"""
		self.expression = expression
	def accept(self, visitor):
		return visitor.visitPrintStmt(self)

class Return(Stmt):
	def __init__(self, keyword, value):
		"""Return         : Token keyword, Expr value"""
		self.keyword = keyword
		self.value = value
	def accept(self, visitor):
		return visitor.visitReturnStmt(self)

class Var(Stmt):
	def __init__(self, name, initializer):
		"""Var            : Token name, Expr initializer"""
		self.name = name
		self.initializer = initializer
	def accept(self, visitor):
		return visitor.visitVarStmt(self)

class While(Stmt):
	def __init__(self, condition, body):
		"""While          : Expr condition, Stmt body"""
		self.condition = condition
		self.body = body
	def accept(self, visitor):
		return visitor.visitWhileStmt(self)

class StmtVisitor(ABC):
	@abstractmethod
	def visitBlockStmt(self, blockStmt):
		pass

	@abstractmethod
	def visitClassStmt(self, classStmt):
		pass

	@abstractmethod
	def visitExpressionStmt(self, expressionStmt):
		pass

	@abstractmethod
	def visitFunctionStmt(self, functionStmt):
		pass

	@abstractmethod
	def visitIfStmt(self, ifStmt):
		pass

	@abstractmethod
	def visitPrintStmt(self, printStmt):
		pass

	@abstractmethod
	def visitReturnStmt(self, returnStmt):
		pass

	@abstractmethod
	def visitVarStmt(self, varStmt):
		pass

	@abstractmethod
	def visitWhileStmt(self, whileStmt):
		pass

