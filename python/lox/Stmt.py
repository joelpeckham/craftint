# Stmt.py
# This file was generated by tool/generateAST.py.
# Generated by: Joel Peckham.
# Last Modified: 2022-03-17.

from abc import ABC, abstractmethod
from Token import Token

class Stmt(ABC):
	@abstractmethod
	def accept(self, visitor):
		pass

class Block(Stmt):
	def __init__(self, statements):
		# Block          : List<Stmt> statements
		self.statements = statements
	def accept(self, visitor):
		return visitor.visitBlock(self)

class ClassStmt(Stmt):
	def __init__(self, name, methods):
		# ClassStmt      : Token name, List<Stmt.Function> methods
		self.name = name
		self.methods = methods
	def accept(self, visitor):
		return visitor.visitClassStmt(self)

class ClassStmt(Stmt):
	def __init__(self, name, superclass, methods):
		# ClassStmt      : Token name, Expr.Variable superclass, List<Stmt.Function> methods
		self.name = name
		self.superclass = superclass
		self.methods = methods
	def accept(self, visitor):
		return visitor.visitClassStmt(self)

class Expression(Stmt):
	def __init__(self, expression):
		# Expression     : Expr expression
		self.expression = expression
	def accept(self, visitor):
		return visitor.visitExpression(self)

class Function(Stmt):
	def __init__(self, name, params, body):
		# Function       : Token name, List<Token> params, List<Stmt> body
		self.name = name
		self.params = params
		self.body = body
	def accept(self, visitor):
		return visitor.visitFunction(self)

class IfStmt(Stmt):
	def __init__(self, condition, thenBranch, elseBranch):
		# IfStmt         : Expr condition, Stmt thenBranch, Stmt elseBranch
		self.condition = condition
		self.thenBranch = thenBranch
		self.elseBranch = elseBranch
	def accept(self, visitor):
		return visitor.visitIfStmt(self)

class Print(Stmt):
	def __init__(self, expression):
		# Print          : Expr expression
		self.expression = expression
	def accept(self, visitor):
		return visitor.visitPrint(self)

class ReturnStmt(Stmt):
	def __init__(self, keyword, value):
		# ReturnStmt     : Token keyword, Expr value
		self.keyword = keyword
		self.value = value
	def accept(self, visitor):
		return visitor.visitReturnStmt(self)

class Var(Stmt):
	def __init__(self, name, initializer):
		# Var            : Token name, Expr initializer
		self.name = name
		self.initializer = initializer
	def accept(self, visitor):
		return visitor.visitVar(self)

class WhileStmt(Stmt):
	def __init__(self, condition, body):
		# WhileStmt      : Expr condition, Stmt body
		self.condition = condition
		self.body = body
	def accept(self, visitor):
		return visitor.visitWhileStmt(self)

class StmtVisitor(ABC):
	@abstractmethod
	def visitBlock(self, block):
		pass

	@abstractmethod
	def visitClassStmt(self, classstmt):
		pass

	@abstractmethod
	def visitClassStmt(self, classstmt):
		pass

	@abstractmethod
	def visitExpression(self, expression):
		pass

	@abstractmethod
	def visitFunction(self, function):
		pass

	@abstractmethod
	def visitIfStmt(self, ifstmt):
		pass

	@abstractmethod
	def visitPrint(self, print):
		pass

	@abstractmethod
	def visitReturnStmt(self, returnstmt):
		pass

	@abstractmethod
	def visitVar(self, var):
		pass

	@abstractmethod
	def visitWhileStmt(self, whilestmt):
		pass

