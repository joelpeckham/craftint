# Expr.py
# This file was generated by tool/generateAST.py.
# Generated by: Joel Peckham.
# Last Modified: 2022-03-17.

from abc import ABC, abstractmethod

class Expr(ABC):
	@abstractmethod
	def accept(self, visitor):
		pass

class Assign(Expr):
	def __init__(self, name, value):
		"""Assign   : Token name, Expr value"""
		self.name = name
		self.value = value
	def accept(self, visitor):
		return visitor.visitAssign(self)

class Binary(Expr):
	def __init__(self, left, operator, right):
		"""Binary   : Expr left, Token operator, Expr right"""
		self.left = left
		self.operator = operator
		self.right = right
	def accept(self, visitor):
		return visitor.visitBinary(self)

class Call(Expr):
	def __init__(self, callee, paren, arguments):
		"""Call     : Expr callee, Token paren, List<Expr> arguments"""
		self.callee = callee
		self.paren = paren
		self.arguments = arguments
	def accept(self, visitor):
		return visitor.visitCall(self)

class Get(Expr):
	def __init__(self, object, name):
		"""Get      : Expr object, Token name"""
		self.object = object
		self.name = name
	def accept(self, visitor):
		return visitor.visitGet(self)

class Grouping(Expr):
	def __init__(self, expression):
		"""Grouping : Expr expression"""
		self.expression = expression
	def accept(self, visitor):
		return visitor.visitGrouping(self)

class Literal(Expr):
	def __init__(self, value):
		"""Literal  : Object value"""
		self.value = value
	def accept(self, visitor):
		return visitor.visitLiteral(self)

class Logical(Expr):
	def __init__(self, left, operator, right):
		"""Logical  : Expr left, Token operator, Expr right"""
		self.left = left
		self.operator = operator
		self.right = right
	def accept(self, visitor):
		return visitor.visitLogical(self)

class Set(Expr):
	def __init__(self, object, name, value):
		"""Set      : Expr object, Token name, Expr value"""
		self.object = object
		self.name = name
		self.value = value
	def accept(self, visitor):
		return visitor.visitSet(self)

class Super(Expr):
	def __init__(self, keyword, method):
		"""Super    : Token keyword, Token method"""
		self.keyword = keyword
		self.method = method
	def accept(self, visitor):
		return visitor.visitSuper(self)

class This(Expr):
	def __init__(self, keyword):
		"""This     : Token keyword"""
		self.keyword = keyword
	def accept(self, visitor):
		return visitor.visitThis(self)

class Unary(Expr):
	def __init__(self, operator, right):
		"""Unary    : Token operator, Expr right"""
		self.operator = operator
		self.right = right
	def accept(self, visitor):
		return visitor.visitUnary(self)

class Variable(Expr):
	def __init__(self, name):
		"""Variable : Token name"""
		self.name = name
	def accept(self, visitor):
		return visitor.visitVariable(self)

class ExprVisitor(ABC):
	@abstractmethod
	def visitAssignExpr(self, assignExpr):
		pass

	@abstractmethod
	def visitBinaryExpr(self, binaryExpr):
		pass

	@abstractmethod
	def visitCallExpr(self, callExpr):
		pass

	@abstractmethod
	def visitGetExpr(self, getExpr):
		pass

	@abstractmethod
	def visitGroupingExpr(self, groupingExpr):
		pass

	@abstractmethod
	def visitLiteralExpr(self, literalExpr):
		pass

	@abstractmethod
	def visitLogicalExpr(self, logicalExpr):
		pass

	@abstractmethod
	def visitSetExpr(self, setExpr):
		pass

	@abstractmethod
	def visitSuperExpr(self, superExpr):
		pass

	@abstractmethod
	def visitThisExpr(self, thisExpr):
		pass

	@abstractmethod
	def visitUnaryExpr(self, unaryExpr):
		pass

	@abstractmethod
	def visitVariableExpr(self, variableExpr):
		pass

