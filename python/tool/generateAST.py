# generateAST.py
# This is a tool to generate the AST classes for Lox.
# When run, this script outputs Expr.py and Stmt.py.
# Written by: Joel Peckham.
# Last Modified: 03/16/2022.

class GrammarNotation:
    def __init__(self, notationString):
        self.notationString = notationString
        self.name = notationString.split(":")[0].strip()
        self.fields = [x.strip().split(" ") for x in notationString.split(":")[1].strip().split(",")]

def defineAST(outputDir, baseClassName, typeList):
    with open(outputDir + baseClassName + ".py", "w") as f:

        # Introduce the file with a comment.
        from datetime import datetime as dt
        startComment = f"""# {baseClassName}.py\n# This file was generated by tool/generateAST.py.\n# Generated by: Joel Peckham.\n# Last Modified: {str(dt.now())[:-16]}.\n\n"""
        f.write(startComment)

        # Import abstract base classes.
        f.write("from abc import ABC, abstractmethod\n")

        # Parse the strings in the type list
        typeList = [GrammarNotation(typeString) for typeString in typeList]

        # Write a visitor class containing the visit methods for each type.
        # This visitor class is used to visit each type in the type list.
        # The visit methods are abstract methods.
        f.write("\n")
        f.write(f"class {baseClassName}(ABC):\n")
        f.write("\t@abstractmethod\n")
        f.write("\tdef accept(self, visitor):\n")
        f.write("\t\tpass\n")
        for t in typeList:
            f.write(f"\nclass {t.name}({baseClassName}):\n")
            parameterString = ", ".join([f"{x[1]}" for x in t.fields])
            f.write(f"\tdef __init__(self, {parameterString}):\n")
            f.write(f'\t\t"""{t.notationString}"""\n')
            for field in t.fields:
                f.write(f"\t\tself.{field[1]} = {field[1]}\n")
            f.write("\tdef accept(self, visitor):\n")
            f.write(f"\t\treturn visitor.visit{t.name}(self)\n")
        
        # Write a visitor class containing the visit methods for each type.
        # This visitor class is used to visit each type in the type list.
        # The visit methods are abstract methods.
        f.write("\n")
        f.write(f"class {baseClassName}Visitor(ABC):\n")
        for t in typeList:
            f.write(f"\t@abstractmethod\n")
            f.write(f"\tdef visit{t.name}(self, {t.name.lower()}):\n")
            f.write("\t\tpass\n\n")


expressionList = [
    "Assign   : Token name, Expr value",
    "Binary   : Expr left, Token operator, Expr right",
    "Call     : Expr callee, Token paren, List<Expr> arguments",
    "Get      : Expr object, Token name",
    "Grouping : Expr expression",
    "Literal  : Object value",
    "Logical  : Expr left, Token operator, Expr right",
    "Set      : Expr object, Token name, Expr value",
    "Super    : Token keyword, Token method",
    "This     : Token keyword",
    "Unary    : Token operator, Expr right",
    "Variable : Token name"
]

statementList = [
    "Block          : List<Stmt> statements",
    "ClassStmt      : Token name, List<Stmt.Function> methods",
    "ClassStmt      : Token name, Expr.Variable superclass, List<Stmt.Function> methods",
    "Expression     : Expr expression",
    "Function       : Token name, List<Token> params, List<Stmt> body",
    "IfStmt         : Expr condition, Stmt thenBranch, Stmt elseBranch",
    "Print          : Expr expression",
    "ReturnStmt     : Token keyword, Expr value",
    "Var            : Token name, Expr initializer",
    "WhileStmt      : Expr condition, Stmt body"
]

defineAST("","Expr", expressionList)
defineAST("","Stmt", statementList)